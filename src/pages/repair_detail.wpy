<template>
  <machinedetails :machine.sync="machineDetail"></machinedetails>
  <view class="detail_view_column">
    <view class="title_view">
      <view class="title_view_fir_part">
        <text class="title_tx">客户信息</text>
      </view>
      <view class="title_view_sec_part" @tap="bindIsShowCustomer">
        <text class="title_tx">V</text>
      </view>
    </view>
    <view wx:if="{{isShowCustomer}}" class="main_view">
      <view class="view_row">
        <text class="label_tx">客户名：</text>
        <text class="info_tx">{{repairRecordDetail.machineCustomerName}}</text>
      </view>
      <view class="view_row">
        <text class="label_tx">联系人：</text>
        <text class="info_tx">{{repairRecordDetail.customerNameInRepairRecord}}</text>
      </view>
      <view class="view_row">
        <text class="label_tx">联系电话：</text>
        <text class="info_tx">{{repairRecordDetail.customerPhoneInRepairRecord}}</text>
      </view>
      <view class="view_row">
        <text class="label_tx">联系地址：</text>
        <text class="info_tx">{{repairRecordDetail.customerAddressInRepairRecord}}</text>
      </view>
    </view>
  </view>
  <view class="detail_view_column">
    <view class="title_view">
      <view class="title_view_fir_part">
        <text class="title_tx">报修信息</text>
      </view>
      <view class="title_view_sec_part" @tap="bindIsShowRepair">
        <text class="title_tx">V</text>
      </view>
    </view>
    <view wx:if="{{isShowRepair}}" class="main_view">
      <view class="view_row">
          <text class="label_tx">标题：</text>
          <text class="info_tx">{{repairRecordDetail.repairRequestTitle}}</text>
      </view>
      <view class="view_row">
          <text class="label_tx">描述：</text>
          <text class="info_tx">{{repairRecordDetail.repairRequestContent}}</text>
      </view>
      <view class="view_row">
        <text class="label_tx">语音：</text>
        <button class="info_tx" size="mini" disabled="{{isSpeaking}}" loading="{{isSpeaking}}" type="{{isSpeaking ? 'warn' : 'primary'}}" @tap="voicePlay">播放语音</button>
      </view>
      <view class="view_row">
          <text class="label_tx">照片：</text>
      </view>
      <image class="pre_repair_image" mode="aspectFill" wx:for="{{preRepairImageArr}}" @tap="changePreRepairImagePreview" data-src="{{item}}" src="{{item}}"></image>
    </view>
  </view>
  <view wx:if="{{isChargePerson}}">
    <button wx:if="{{isReady}}" class="single_button" @tap="bindAcceptOrder" >确认接单</button>
    <view wx:else >
      <button class="single_button" @tap="bindUploadFeedback">提交</button>
      <view class="detail_view_column">
          <view class="title_view">
            <view class="title_view_fir_part">
              <text class="title_tx">维修详情</text>
            </view>
          </view>
          <view class="main_view">
            <picker @change="bindResultPickerChange" value="{{resultIndex}}" range="{{resultMark}}">
                <view class="view_row">
                    <text class="label_tx">维修结果：</text>
                    <view class="line_picker">{{resultMark[resultIndex]}}</view>
                </view>
            </picker>
            <view wx:if="{{isResolved}}">
                <picker @change="bindPartPickerChange" value="{{partIndex}}" range="{{partMark}}">
                    <view class="view_row">
                        <text class="label_tx">故障部位：</text>
                        <view class="line_picker">{{partMark[partIndex]}}</view>
                    </view>
                </picker>
                <view class="view_row">
                    <text class="label_tx">问题描述：</text>
                    <text class="info_tx" @tap="showDescriptionInput">口口口</text>
                </view>
                <modal hidden="{{hiddenDescription}}" title="问题描述" confirm-text="确定" no-cancel="true" bindconfirm="listenerDescription" >
                    <textarea @input="bindIssueDescriptionInput" class="textarea" style="height: 3em" placeholder="输入问题原因"></textarea>
                </modal>
                <view class="view_row">
                    <text class="label_tx">处理方法：</text>
                    <text class="info_tx" @tap="showMethodInput">口口口</text>
                </view>
                <modal hidden="{{hiddenMethod}}" title="处理方法" confirm-text="确定" no-cancel="true" bindconfirm="listenerMethod" >
                    <textarea @input="bindRepairMethodInput" class="textarea" style="height: 3em" placeholder="输入维修方法"></textarea>
                </modal>
                <view class="view_row">
                    <text class="label_tx">照片：</text>
                    <button class="single_btn" @tap="bindPreviewImage" size="mini" type="primary">点击拍照/选图</button>
                </view>
                <image class="repair_image" mode="aspectFill" wx:for="{{repairImageArr}}" @tap="changeRepairImagePreview" data-src="{{item}}" src="{{item}}"></image>
                <view class="view_row">
                    <button class="add_btn" @tap="bindAddPartListBtn" >添加配件信息</button>
                </view>
                <view class="view_row" wx:if="{{isPartsShow}}">
                    <text class="view_row_half">配件名</text>
                    <text class="view_row_half">是否寄回</text>
                </view>
                <view class="input_line_vw" wx:for="{{partsInfoList}}" @tap='bindPartsNum({{index}})'>
                    <input class="line_input" type="text" @input="bindPartInput" placeholder="输入配件名" focus="true"/>
                    <switch class="switch" type="checkbox" @change="bindSwitch"/>
                    <icon class="clear_icon" size='20' color="red" type='clear' @tap="bindClear"></icon>
                </view>
            </view>
          </view>
      </view>
    </view>
  </view>
</template>
<style lang="less">
    page {
        background: #F0F3F5;
        margin-bottom: 98rpx;
    }
    .single_button {
        background: #007474;
        font-family: PingFangSC-Regular;
        font-size: 30rpx;
        color: #FFFFFF;
        letter-spacing: 0;
        text-align: center;
        width: 100%;
        position: fixed;
        bottom:0;
    }
    .line_vw {
        margin: 20rpx;
        display: flex;
        .line_half_vw {
            width: 50%;
            height: 60%
        }
    }
    .list_view {
        border-bottom: 1px solid #ababab;
    }
    .input_line_vw {
        margin: 20rpx;
        display: flex;
        border-bottom: 1px solid #ababab;
        .line_input {
            width: 50%;
        }
        .switch{
            width: 40%;
        }
        .clear_icon {
            width: 10%;
        }
    }
    .line_picker {
        height: 70rpx;
        background: rgba(0,116,116,0.10);
        border: 1rpx solid #007474;
        border-radius: 10rpx;
        font-family: PingFangSC-Regular;
        font-size: 28rpx;
        color: #007474;
        letter-spacing: 0;
        text-align: center;
    }
    .textarea {
        width: 90%;
        margin-left: 20rpx;
        background-color: #fff;
    }
    .add_btn {
        height: 70rpx;
        width: 100%;
        border: 1rpx solid #007474;
        box-shadow: 0 6rpx 14rpx 0 rgba(0,116,116,0.20);
        border-radius: 10rpx;
        font-family: PingFangSC-Regular;
        font-size: 30rpx;
        color: #007474;
        letter-spacing: 0;
        text-align: center;
    }
    .pre_repair_image {
        margin-left: 2.5%;
        width: 30%;
        height: 200rpx;
    }
    .repair_image {
        margin-left: 2.5%;
        width: 30%;
        height: 200rpx;
    }
</style>
<script>
  /* eslint-disable no-undef,eqeqeq */

    import wepy from 'wepy'
    import MachineDetails from '../components/machine_details'
    import api from '@/api/api'
    import {
        USER_ID,
        REPAIR_STATUS_SIGNED_TO_REPAIRER,
        REPAIR_STATUS_REPAIRER_ACCEPTED,
        REPAIR_STATUS_REPAIR_NG,
        REPAIR_STATUS_REPAIR_OK,
        PARTS_STATUS_NOT_NEED,
        PARTS_STATUS_WAIT_FOR_SENDBACK
    } from '@/utils/constant'
    export default class RepairDetail extends wepy.page {
      config = {
        navigationBarTitleText: '维修详情'
      }
      components = {
        machinedetails: MachineDetails
      };

      data = {
        machineDetail: {},
        repairRecordDetail: {},
        isShowCustomer: false,
        isShowRepair: true,
        isSpeaking: false,
        isChargePerson: false,
        preRepairImageArr: ['http://img1.3lian.com/2015/w7/85/d/101.jpg', 'http://img1.3lian.com/2015/w7/85/d/101.jpg', 'http://img1.3lian.com/2015/w7/85/d/101.jpg'],
        isReady: true,
        resultMark: ['没解决', '已解决'],
        resultIndex: 0,
        isResolved: false,
        repairActualInfo: {
          repairRecordId: 0,
          issuePosition: '2',
          afterResolvePictures: '',
          issueDescription: '',
          repairMethod: '',
          uploadFilesAmount: '',
          alreadyUploadedFilesNumber: '0'
        },
        hiddenDescription: true,
        hiddenMethod: true,
        repairImageArr: [],
        count: 0,
        repairRecordIndex: 0,
        partMark: ['电脑故障', '框架故障', '上轴故障', '下轴故障'],
        partIndex: 0,
        isPartsShow: false,
        partsInfoList: [],
        partsIndex: 0
      };
      methods = {
        bindIsShowCustomer() {
          let isShow = this.isShowCustomer
          this.isShowCustomer = !isShow
        },
        bindIsShowRepair() {
          let isShow = this.isShowRepair
          this.isShowRepair = !isShow
        },
        voicePlay() {
          console.log('eventing_repair_info:手指按下了...')
          this.isSpeaking = true
          const innerAudioContext = wepy.createInnerAudioContext()
          innerAudioContext.autoplay = true
          innerAudioContext.src = this.repairRecordDetail.repairRequestVoice
          innerAudioContext.onPlay(() => {
            console.log('开始播放')
          })
          innerAudioContext.onPause(() => {
            console.log('pause了')
            this.isSpeaking = false
            this.$apply()
          })
          innerAudioContext.onStop(() => {
            console.log('stop了')
            this.isSpeaking = false
            this.$apply()
          })
          innerAudioContext.onError((res) => {
            console.log(res.errMsg)
            console.log(res.errCode)
            this.isSpeaking = false
            this.$apply()
          })
          innerAudioContext.onEnded(() => {
            console.log('bo完了')
            this.isSpeaking = false
            this.$apply()
          })
        },
        changePreRepairImagePreview(e) {
          var self = this
          wepy.previewImage({
            current: e.currentTarget.dataset.src,
            urls: self.data.preRepairImageArr
          })
        },
          // accept order
        async bindAcceptOrder() {
          this.repairRecordDetail.status = REPAIR_STATUS_REPAIRER_ACCEPTED
          let acceptOrderJson = await api.updateRepairRecord({
            query: this.repairRecordDetail
          })
          console.log(acceptOrderJson)
          if (acceptOrderJson.data.code !== 200) {
            wx.showModal({
              title: '接单失败！',
              content: '网络错误',
              showCancel: false,
              confirmColor: '#007aff',
              success: function () {
              }
            })
          } else {
            wx.showModal({
              title: '接单成功！',
              content: '接单成功',
              showCancel: false,
              confirmColor: '#007aff',
              success: function () {
                wepy.navigateBack()
              }
            })
          }
        },
          // get repair result
        bindResultPickerChange(e) {
          console.log('结果picker发送选择改变，携带值为', e.detail.value)
          this.resultIndex = e.detail.value
          if (e.detail.value == 2 || e.detail.value == 1) {
            this.isResolved = true
          } else {
            this.isResolved = false
          }
          this.$apply()
        },
          // choose parts
        bindPartPickerChange(e) {
          console.log('部位picker发送选择改变，携带值为', e.detail.value)
          this.partIndex = e.detail.value
        },
        showDescriptionInput() {
          this.hiddenDescription = false
          this.$apply()
        },
        listenerDescription() {
          this.hiddenDescription = true
          this.$apply()
        },
        bindIssueDescriptionInput(e) {
          console.log(e.detail.value)
          this.repairActualInfo.issueDescription = e.detail.value
        },
        showMethodInput() {
          this.hiddenMethod = false
          this.$apply()
        },
        listenerMethod() {
          this.hiddenMethod = true
          this.$apply()
        },
        bindRepairMethodInput(e) {
          console.log(e.detail.value)
          this.repairActualInfo.repairMethod = e.detail.value
        },
        async bindPreviewImage() {
          let res = await wepy.chooseImage({count: 3})
          if (res.errMsg === 'chooseImage:ok') {
            let tempFilePaths = res.tempFilePaths
            this.repairImageArr = tempFilePaths
            console.log('srcssssssssssssssssssssssss')
            console.log(tempFilePaths)
            this.$apply()
          }
        },
        changeRepairImagePreview(e) {
          var self = this
          wepy.previewImage({
            current: e.currentTarget.dataset.src,
            urls: self.data.repairImageArr
          })
        },
          // 点击添加配件更换信息
        bindAddPartListBtn() {
          this.partsInfoList = this.partsInfoList.concat({
            partsName: '',
            partsStatus: '',
            sendbackConfirmedPerson: 1
          })
          this.isPartsShow = true
          this.$apply()
        },
          // get点击的行号
        bindPartsNum(e) {
          console.log(e)
          this.partsIndex = e
        },
          // 根据行号加入数据到数组中
        bindPartInput(e) {
          console.log(e.detail.value)
          this.partsInfoList[this.partsIndex].partsName = e.detail.value
          console.log(this.partsInfoList)
        },
          // get partsStatus by switch
        bindSwitch(e) {
          console.log(e.detail.value)
          if (e.detail.value == true) {
            this.partsInfoList[this.partsIndex].partsStatus = PARTS_STATUS_WAIT_FOR_SENDBACK
          } else {
            this.partsInfoList[this.partsIndex].partsStatus = PARTS_STATUS_NOT_NEED
          }
          console.log(this.partsInfoList)
        },
          // 根据行号删除数组中的数据
        bindClear() {
          this.partsInfoList.splice(this.partsIndex, 1)
          this.$apply()
        },
        async bindUploadFeedback() {
          if (this.resultIndex == 0) {
                // 维修结果：没修完
            this.repairRecordDetail.status = REPAIR_STATUS_REPAIR_NG
            let repairNGJson = await api.updateRepairRecord({
              query: this.repairRecordDetail
            })
            console.log(repairNGJson)
            if (repairNGJson.data.code !== 200) {
              wx.showModal({
                title: '上传失败！',
                content: '网络错误，请检查网络',
                showCancel: false,
                confirmColor: '#007aff',
                success: function () {
                }
              })
            } else {
              wx.showModal({
                title: '维修结果：没修完！',
                content: '将申请重新派单',
                showCancel: false,
                confirmColor: '#007aff',
                success: function () {
                  wepy.navigateBack()
                }
              })
            }
          } else {
            this.repairActualInfo.repairRecordId = this.machineDetail.id
            // let strRepairActualInfo = JSON.stringify(this.repairActualInfo)
            // let strPartsInfoList = []
            // if (this.partsInfoList.length > 0) {
            //   for (var i = 0; i < this.partsInfoList.length; i++) {
            //     strPartsInfoList = strPartsInfoList.concat(JSON.stringify(this.partsInfoList[i]))
            //   }
            // }
            const repairFeedbackJson = await api.uploadRepairFeedback({
              query: {
                partsInfoList: this.partsInfoList,
                repairActualInfo: this.repairActualInfo
              }
            })
            console.log('add结果：', repairFeedbackJson)
            if (repairFeedbackJson.data.code === 200) {
              this.repairActualInfo.id = repairFeedbackJson.data.data
              this.repairActualInfo.uploadFilesAmount = this.repairImageArr.length.toString()
              strRepairActualInfo = JSON.stringify(this.repairActualInfo)
              this.addRepairActualImageSrc(strRepairActualInfo, this.count)
            } else {
              wx.showModal({
                title: '上传信息失败！',
                content: '网络错误，请检查网络',
                showCancel: false,
                confirmColor: '#007aff',
                success: function () {
                }
              })
            }
          }
        },
        bindNavigateBack() {
          wepy.navigateBack()
        }
      };

      async addRepairActualImageSrc(strRepairActualInfo, count) {
        let updateImageSrcJson = await api.uploadRepairActualFiles({
          query: {
            filePath: this.repairImageArr[count],
            name: 'file',
            data: {
              repairActualInfo: strRepairActualInfo,
              repairResult: REPAIR_STATUS_REPAIR_OK,
              fileNumber: count + 1
            }
          }
        })
        console.log('upload结果： ', updateImageSrcJson)
        let returnImageSrcData = JSON.parse(updateImageSrcJson.data)
        if (returnImageSrcData.code === 200) {
          console.log('count的值： ', count)
          if (count >= this.repairImageArr.length - 1) {
            wx.showModal({
              title: '维修完成！',
              content: '信息上传成功！',
              showCancel: false,
              confirmColor: '#007aff',
              success: function () {
                wepy.navigateBack()
              }
            })
          } else {
            count++
            strRepairActualInfo = JSON.stringify(returnImageSrcData.data)
            console.log('return结果： ', strRepairActualInfo)
            this.addRepairActualImageSrc(strRepairActualInfo, count)
          }
        } else {
          wepy.showModal({
            title: '上传出错，请重新上传！',
            content: '网络错误',
            showCancel: false,
            confirmColor: '#007aff',
            success: function () {
            }
          })
        }
      }
      events = {};

      onLoad(options) {
        console.log(options)
        this.machineDetail = JSON.parse(options.machineDetail)
        console.log(this.machineDetail)
        this.preRepairImageArr = this.machineDetail.repairRequestPictures.split(',')
        if (this.machineDetail.status === REPAIR_STATUS_SIGNED_TO_REPAIRER) {
          this.isReady = true
        } else {
          this.isReady = false
        }
        this.getRepairRecord(this.machineDetail.id)
        this.$apply()
      };

      // get repair record detail by recordID
      async getRepairRecord(repairRecordId) {
        let repairRecordJson = await api.getRepairRecordList({
          query: {
            repairRecordId: repairRecordId
          }
        })
        console.log('repairRecordJson 获取 :')
        console.log(repairRecordJson)
        console.log(repairRecordJson.data.data.list)
        if (repairRecordJson.data.data.list.length > 0) {
          this.repairRecordDetail = repairRecordJson.data.data.list[0]
          this.preRepairImageArr = this.repairRecordDetail.repairRequestPictures.split(',')
          if (wepy.getStorageSync(USER_ID) == repairRecordJson.data.data.list[0].repairChargePerson) {
            this.isChargePerson = true
          } else {
            this.isChargePerson = false
          }
        } else {
          wx.showModal({
            title: '获取机器信息出错！',
            content: '网络错误',
            showCancel: false,
            confirmColor: '#007aff',
            success: function () {
              wepy.navigateBack()
            }
          })
        }
        this.$apply()
      };

        // Other properties
    }
</script>
