<template>
  <machinedetails :machine.sync="machineDetail"></machinedetails>
  <view class="detail_view_column">
    <view class="title_view">
      <view class="title_view_fir_part">
        <text class="title_tx">客户信息</text>
      </view>
      <view class="title_view_sec_part" @tap="bindIsShowCustomer">
        <text class="title_tx">V</text>
      </view>
    </view>
    <view wx:if="{{isShowCustomer}}" class="main_view">
      <view class="view_row">
        <text class="label_tx">客户名：</text>
        <text class="info_tx">{{repairRecordDetail.machineCustomerName}}</text>
      </view>
      <view class="view_row">
        <text class="label_tx">联系人：</text>
        <text class="info_tx">{{repairRecordDetail.customerNameInRepairRecord}}</text>
      </view>
      <view class="view_row">
        <text class="label_tx">联系电话：</text>
        <text class="info_tx">{{repairRecordDetail.customerPhoneInRepairRecord}}</text>
      </view>
      <view class="view_row">
        <text class="label_tx">联系地址：</text>
        <text class="info_tx">{{repairRecordDetail.customerAddressInRepairRecord}}</text>
      </view>
    </view>
  </view>
  <view class="detail_view_column">
    <view class="title_view">
      <view class="title_view_fir_part">
        <text class="title_tx">报修信息</text>
      </view>
      <view class="title_view_sec_part" @tap="bindIsShowRepair">
        <text class="title_tx">V</text>
      </view>
    </view>
    <view wx:if="{{isShowRepair}}" class="main_view">
      <view class="view_row">
          <text class="label_tx">标题：</text>
          <text class="info_tx">{{repairRecordDetail.repairRequestTitle}}</text>
      </view>
      <view class="view_row">
          <text class="label_tx">描述：</text>
          <text class="info_tx">{{repairRecordDetail.repairRequestContent}}</text>
      </view>
      <view class="view_row">
        <text class="label_tx">语音：</text>
        <button class="info_tx" size="mini" disabled="{{isSpeaking}}" loading="{{isSpeaking}}" type="{{isSpeaking ? 'warn' : 'primary'}}" @tap="voicePlay">播放语音</button>
      </view>
      <view class="view_row">
          <text class="label_tx">照片：</text>
      </view>
      <image class="pre_repair_image" mode="aspectFill" wx:for="{{preRepairImageArr}}" @tap="changePreRepairImagePreview" data-src="{{item}}" src="{{item}}"></image>
    </view>
  </view>
  <view wx:if="{{isChargePerson}}">
    <button wx:if="{{isReady}}" class="single_button" @tap="bindAcceptOrder" >确认接单</button>
    <view wx:else >
      <view class="detail_view_column">
          <view class="title_view">
            <view class="title_view_fir_part">
              <text class="title_tx">维修详情</text>
            </view>
          </view>
          <view class="main_view">
            <view class="view_row">
              <text class="label_tx">维修结果：</text>
              <picker class="picker_view" @change="bindResultPickerChange" value="{{resultIndex}}" range="{{resultMark}}">
                <text class="picker_tx">{{resultMark[resultIndex]}}</text>
              </picker>
            </view>
            <view wx:if="{{isResolved}}">
              <view class="view_row">
                <text class="label_tx">故障部位：</text>
                <checkbox-group class="checkbox_label" @change="bindCheckboxChange">
                  <label wx:for="{{partMark}}">
                    <view class="checkbox_view">
                      <checkbox value="{{item.id}}"/>{{item.name}}
                    </view>
                  </label>
                </checkbox-group>
              </view>
              <view class="view_row">
                  <text class="label_tx">问题描述：</text>
                  <text class="info_tx" @tap="showDescriptionInput">口口口</text>
              </view>
              <modal hidden="{{hiddenDescription}}" title="问题描述" confirm-text="确定" no-cancel="true" bindconfirm="listenerDescription" >
                  <textarea @input="bindIssueDescriptionInput" class="textareaInput" placeholder="输入问题原因"></textarea>
              </modal>
              <text class="get_input_tx">{{repairActualInfo.issueDescription}}</text>
              <view class="view_row">
                  <text class="label_tx">处理方法：</text>
                  <text class="info_tx" @tap="showMethodInput">口口口</text>
              </view>
              <modal hidden="{{hiddenMethod}}" title="处理方法" confirm-text="确定" no-cancel="true" bindconfirm="listenerMethod" >
                  <textarea @input="bindRepairMethodInput" class="textareaInput" placeholder="输入维修方法"></textarea>
              </modal>
              <text class="get_input_tx">{{repairActualInfo.repairMethod}}</text>
              <view class="view_row">
                  <text class="label_tx">照片：</text>
                  <button class="single_btn" @tap="bindPreviewImage" size="mini" type="primary">点击拍照/选图</button>
              </view>
              <image class="repair_image" mode="aspectFill" wx:for="{{repairImageArr}}" @tap="changeRepairImagePreview" data-src="{{item}}" src="{{item}}"></image>
              <view class="view_row">
                <text class="label_tx">配件：</text>
              </view>
              <view class="view_row" wx:for="{{partsInfoList}}" >
                <text class="info_tx">{{item.partsName}}-{{(item.partsStatus=='1')? '不寄回':'寄回'}}</text>
                <icon class="clear_icon" size='20' color="red" type='clear' @tap="bindClear({{index}})"></icon>
              </view>
              <view class="view_row">
                <button class="add_btn" @tap="showPartsInfo" >添加配件信息</button>
              </view>
              <modal hidden="{{hiddenPartsInfo}}" title="配件" confirm-text="确定" no-cancel="true" bindconfirm="listenerPartsInfo" >
                <view class="view_row">
                  <text class="label_tx">配件名称：</text>
                  <input class="part_input" type="text" value="{{partsName}}" @input="bindPartInput" placeholder="输入配件名"/>
                </view>
                <view class="view_row">
                  <text class="label_tx">是否寄回：</text>
                  <radio-group bindchange="radioChange">
                    <radio class="radio" value="1" checked="{{radioChecked}}">否</radio>
                    <radio class="radio" value="2" >是</radio>
                  </radio-group>
                </view>
              </modal>
            </view>
          </view>
      </view>
      <button class="single_button" @tap="bindUploadFeedback">提交</button>
    </view>
  </view>
</template>
<style lang="less">
    page {
        margin-bottom: 120rpx;
    }
    .picker_view {
      width: 160rpx;
      background: rgba(0,116,116,0.10);
      border: 1rpx solid #007474;
      border-radius: 10rpx;
      text-align: center;
      margin-left: 30rpx;
      .picker_tx {
        font-family: PingFangSC-Regular;
        color: #007474;
        letter-spacing: 0;
      }
    }
    .checkbox_label {
      width: 100%;
      display: flex;
      flex-direction: row;
      flex-wrap: wrap;
    }
    .checkbox_view {
      font-family: PingFangSC-Regular;
      font-size: 30rpx;
      color: #333333;
      letter-spacing: 0;
      align-items: center;
      margin-left: 30rpx;
      margin-top: 15rpx;
      margin-bottom: 15rpx;
    }
    .part_input {
      width: 340rpx;
      height: 66rpx;
      border: 1rpx solid #007474;
      border-radius: 6rpx;
      font-family: PingFangSC-Regular;
      font-size: 30rpx;
      color: #3B403D;
      letter-spacing: 0;
      margin-left: 15rpx;
      padding-left: 10rpx;
    }
    .radio {
      margin-right: 50rpx;
      margin-left: 30rpx;
      font-size: 30rpx;
    }
    .clear_icon {
        width: 10%;
    }
    .add_btn {
        width: 100%;
        border: 1rpx solid #007474;
        box-shadow: 0 6rpx 14rpx 0 rgba(0,116,116,0.20);
        border-radius: 10rpx;
        font-family: PingFangSC-Regular;
        font-size: 30rpx;
        color: #007474;
        letter-spacing: 0;
        text-align: center;
    }
    .pre_repair_image {
        margin-left: 2.5%;
        width: 30%;
        height: 200rpx;
    }
    .repair_image {
        margin-left: 2.5%;
        width: 30%;
        height: 200rpx;
    }
</style>
<script>
  /* eslint-disable no-undef,eqeqeq */

    import wepy from 'wepy'
    import MachineDetails from '../components/machine_details'
    import api from '@/api/api'
    import tip from '@/utils/tip'
    import {
        USER_ID,
        REPAIR_STATUS_SIGNED_TO_REPAIRER,
        REPAIR_STATUS_REPAIRER_ACCEPTED,
        REPAIR_STATUS_REPAIR_NG,
        REPAIR_STATUS_REPAIR_OK
    } from '@/utils/constant'
    export default class RepairDetail extends wepy.page {
      config = {
        navigationBarTitleText: '维修详情'
      }
      components = {
        machinedetails: MachineDetails
      };

      data = {
        machineDetail: {},
        repairRecordDetail: {},
        isShowCustomer: false,
        isShowRepair: false,
        isSpeaking: false,
        isChargePerson: false,
        preRepairImageArr: [],
        isReady: true,
        resultMark: ['没解决', '已解决'],
        resultIndex: 0,
        isResolved: false,
        repairActualInfo: {
          repairRecordId: 0,
          issuePosition: '',
          afterResolvePictures: '',
          issueDescription: '',
          repairMethod: '',
          uploadFilesAmount: '',
          alreadyUploadedFilesNumber: '0'
        },
        hiddenDescription: true,
        hiddenMethod: true,
        hiddenPartsInfo: true,
        repairImageArr: [],
        count: 0,
        repairRecordIndex: 0,
        partMark: [
            {id: 1, name: '电脑'},
            {id: 2, name: '框架'},
            {id: 3, name: '上轴'},
            {id: 4, name: '下轴'},
            {id: 5, name: '驱动'}
        ],
        partsName: '',
        partsStatus: '1',
        radioChecked: true,
        partsInfoList: []
      };
      methods = {
        bindIsShowCustomer() {
          let isShow = this.isShowCustomer
          this.isShowCustomer = !isShow
        },
        bindIsShowRepair() {
          let isShow = this.isShowRepair
          this.isShowRepair = !isShow
        },
        voicePlay() {
          console.log('eventing_repair_info:手指按下了...')
          this.isSpeaking = true
          const innerAudioContext = wepy.createInnerAudioContext()
          innerAudioContext.autoplay = true
          innerAudioContext.src = this.repairRecordDetail.repairRequestVoice
          innerAudioContext.onPlay(() => {
            console.log('开始播放')
          })
          innerAudioContext.onPause(() => {
            console.log('pause了')
            this.isSpeaking = false
            this.$apply()
          })
          innerAudioContext.onStop(() => {
            console.log('stop了')
            this.isSpeaking = false
            this.$apply()
          })
          innerAudioContext.onError((res) => {
            console.log(res.errMsg)
            console.log(res.errCode)
            this.isSpeaking = false
            this.$apply()
          })
          innerAudioContext.onEnded(() => {
            console.log('bo完了')
            this.isSpeaking = false
            this.$apply()
          })
        },
        changePreRepairImagePreview(e) {
          var self = this
          wepy.previewImage({
            current: e.currentTarget.dataset.src,
            urls: self.data.preRepairImageArr
          })
        },
          // accept order
        async bindAcceptOrder() {
          this.repairRecordDetail.status = REPAIR_STATUS_REPAIRER_ACCEPTED
          let acceptOrderJson = await api.updateRepairRecord({
            query: this.repairRecordDetail
          })
          console.log('接单结果：', acceptOrderJson)
          if (acceptOrderJson.data.code !== 200) {
            tip.confirm('接单失败！网络错误，请检查网络！')
          } else {
            tip.confirm('成功！返回上一页', wx.navigateBack())
          }
        },
          // get repair result
        bindResultPickerChange(e) {
          console.log('结果picker发送选择改变，携带值为', e.detail.value)
          this.resultIndex = e.detail.value
          if (e.detail.value == 2 || e.detail.value == 1) {
            this.isResolved = true
          } else {
            this.isResolved = false
          }
          this.$apply()
        },
          // choose parts
        bindCheckboxChange(e) {
          console.log('部位picker发送选择改变，携带值为', e.detail.value)
          this.repairActualInfo.issuePosition = e.detail.value.toString()
        },
        showDescriptionInput() {
          this.hiddenDescription = false
          this.$apply()
        },
        listenerDescription() {
          this.hiddenDescription = true
          this.$apply()
        },
        bindIssueDescriptionInput(e) {
          console.log(e.detail.value)
          this.repairActualInfo.issueDescription = e.detail.value
        },
        showMethodInput() {
          this.hiddenMethod = false
          this.$apply()
        },
        listenerMethod() {
          this.hiddenMethod = true
          this.$apply()
        },
        bindRepairMethodInput(e) {
          console.log(e.detail.value)
          this.repairActualInfo.repairMethod = e.detail.value
        },
        async bindPreviewImage() {
          let res = await wepy.chooseImage({count: 3})
          if (res.errMsg === 'chooseImage:ok') {
            let tempFilePaths = res.tempFilePaths
            this.repairImageArr = tempFilePaths
            console.log('srcsssss：', tempFilePaths)
            this.$apply()
          }
        },
        changeRepairImagePreview(e) {
          var self = this
          wepy.previewImage({
            current: e.currentTarget.dataset.src,
            urls: self.data.repairImageArr
          })
        },
          // show add parts modal
        showPartsInfo() {
          this.hiddenPartsInfo = false
          this.partsName = ''
          this.partsStatus = '1'
          this.radioChecked = true
          this.$apply()
        },
        bindPartInput(e) {
          console.log(e.detail.value)
          this.partsName = e.detail.value
        },
          // get partsStatus by radio
        radioChange(e) {
          console.log('radio发生change事件，携带value值为：', e.detail.value)
          this.partsStatus = e.detail.value
          if (this.partsStatus == '2') {
            this.radioChecked = false
          }
        },
        // 添加配件更换信息到列表
        listenerPartsInfo() {
          if (this.partsName == '') {
            this.hiddenPartsInfo = true
          } else {
            this.hiddenPartsInfo = true
            this.partsInfoList = this.partsInfoList.concat({
              partsName: this.partsName,
              partsStatus: this.partsStatus,
              sendbackConfirmedPerson: 1
            })
          }
          this.$apply()
        },
          // 根据行号删除数组中的数据
        bindClear(e) {
          console.log('行号eeeeeeeeeeeeeeee', e)
          this.partsInfoList.splice(e, 1)
          this.$apply()
        },
        async bindUploadFeedback() {
          if (this.resultIndex == 0) {
                // 维修结果：没修完
            this.repairRecordDetail.status = REPAIR_STATUS_REPAIR_NG
            let repairNGJson = await api.updateRepairRecord({
              query: this.repairRecordDetail
            })
            console.log('没修完提交结果：', repairNGJson)
            if (repairNGJson.data.code !== 200) {
              tip.confirm('失败！网络错误，请检查网络！')
            } else {
              tip.confirm('成功！将启动重新派单！', wx.navigateBack(), '没修完')
            }
          } else {
              // 维修结果：已修完
            if (this.repairActualInfo.issuePosition == '') {
              tip.alert('请选择故障部位')
            } else if (this.repairActualInfo.issueDescription == '') {
              tip.alert('请输入问题描述')
            } else if (this.repairActualInfo.repairMethod == '') {
              tip.alert('请输入处理方法')
            } else if (this.repairImageArr.length == 0) {
              tip.alert('请拍下故障照片')
            } else {
              this.repairActualInfo.repairRecordId = this.machineDetail.id
              const repairFeedbackJson = await api.uploadRepairFeedback({
                query: {
                  partsInfoList: this.partsInfoList,
                  repairActualInfo: this.repairActualInfo
                }
              })
              console.log('add结果：', repairFeedbackJson)
              if (repairFeedbackJson.data.code === 200) {
                this.repairActualInfo.id = repairFeedbackJson.data.data
                this.repairActualInfo.uploadFilesAmount = this.repairImageArr.length.toString()
                let strRepairActualInfo = JSON.stringify(this.repairActualInfo)
                this.addRepairActualImageSrc(strRepairActualInfo, this.count)
              } else {
                tip.confirm('上传信息失败！网络错误，请检查网络！')
              }
            }
          }
        },
        bindNavigateBack() {
          wepy.navigateBack()
        }
      };

      async addRepairActualImageSrc(strRepairActualInfo, count) {
        let updateImageSrcJson = await api.uploadRepairActualFiles({
          query: {
            filePath: this.repairImageArr[count],
            name: 'file',
            data: {
              repairActualInfo: strRepairActualInfo,
              repairResult: REPAIR_STATUS_REPAIR_OK,
              fileNumber: count + 1
            }
          }
        })
        console.log('upload结果： ', updateImageSrcJson)
        let returnImageSrcData = JSON.parse(updateImageSrcJson.data)
        if (returnImageSrcData.code === 200) {
          console.log('count的值： ', count)
          if (count >= this.repairImageArr.length - 1) {
            tip.confirm('成功！返回上一页', wx.navigateBack(), '维修完成')
          } else {
            count++
            strRepairActualInfo = JSON.stringify(returnImageSrcData.data)
            console.log('return结果： ', strRepairActualInfo)
            this.addRepairActualImageSrc(strRepairActualInfo, count)
          }
        } else {
          tip.confirm('失败！网络错误，请检查网络！')
        }
      }
      events = {};

      onLoad(options) {
        console.log('from last page:', options)
        this.machineDetail = JSON.parse(options.machineDetail)
        this.preRepairImageArr = this.machineDetail.repairRequestPictures.split(',')
        if (this.machineDetail.status === REPAIR_STATUS_SIGNED_TO_REPAIRER) {
          this.isReady = true
        } else {
          this.isReady = false
        }
        this.getRepairRecord(this.machineDetail.id)
        this.$apply()
      };

      // get repair record detail by recordID
      async getRepairRecord(repairRecordId) {
        let repairRecordJson = await api.getRepairRecordList({
          query: {
            repairRecordId: repairRecordId
          }
        })
        console.log('get repairRecord list by id:', repairRecordJson)
        console.log(repairRecordJson.data.data.list)
        if (repairRecordJson.data.data.list.length > 0) {
          this.repairRecordDetail = repairRecordJson.data.data.list[0]
          this.preRepairImageArr = this.repairRecordDetail.repairRequestPictures.split(',')
          if (wepy.getStorageSync(USER_ID) == repairRecordJson.data.data.list[0].repairChargePerson) {
            this.isChargePerson = true
          } else {
            this.isChargePerson = false
          }
        } else {
          tip.confirm('获取信息出错！网络错误，请检查网络', wx.navigateBack())
        }
        this.$apply()
      };

        // Other properties
    }
</script>
