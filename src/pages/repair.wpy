<style lang="less" xmlns:wx="http://www.w3.org/1999/xhtml" xmlns:wx="http://www.w3.org/1999/xhtml">

</style>
<template>
  <view wx:if="{{roleId == 1||roleId == 2}}" class="list_column">
    <view class="list_view_row" wx:for="{{repairList}}" wx:key="item" @tap="listItemClick({{item}})">
      <view class="view_column_left">
        <text class="nameplate_tx">{{item.machineNameplate}}</text>
        <text class="type_tx">{{item.machineType}}</text>
      </view>
      <view class="view_column_right">
        <text class="details_tx">{{item.machineCustomerName}}</text>
        <button class="status_btn_light">待派单</button>
      </view>
    </view>
  </view>
  <view wx:else class="list_column">
    <view class="list_view_row" wx:for="{{repairList}}" wx:key="item" @tap="listItemClick({{item}})">
      <view class="view_column_left">
        <text class="nameplate_tx">{{item.machineNameplate}}</text>
        <text class="type_tx">{{item.machineType}}</text>
      </view>
      <view class="view_column_right">
        <text class="details_tx">{{item.needleNum}}/{{item.headNum}}/{{item.headDistance}}/{{item.xDistance}}/{{item.yDistance}}</text>
        <button wx:if="{{item.status == 2}}" class="status_btn_light">待接单</button>
        <button wx:elif="{{item.status == 3}}" class="status_btn_color">待维修</button>
        <button wx:elif="{{item.status == 4}}" class="status_btn_color">失败</button>
        <button wx:elif="{{item.status == 7}}" class="status_btn_color">待评价</button>
        <button wx:else class="status_btn_color">{{item.status}}</button>
      </view>
    </view>
  </view>
</template>
<script>
    /* eslint-disable eqeqeq */

    import wepy from 'wepy'
    import api from '@/api/api'
    import tip from '@/utils/tip'
    import {
      ROLE_ID,
      ACCOUNT,
      REPAIR_STATUS_REPAIR_NG,
      REPAIR_STATUS_REPAIR_OK
    } from '@/utils/constant'

    export default class Repair extends wepy.page {
      config = {
        navigationBarTitleText: '维修',
        enablePullDownRefresh: true
      }
      components = {}
      data = {
        repairList: [],
        roleId: ''
      }

      events = {}

      methods = {
        listItemClick(e) {
          console.log('eeeeeeeeeeeeeeeeeeeeeeeeeeeee', e)
          if (e.status == REPAIR_STATUS_REPAIR_NG) {
            tip.confirm('等待再派！')
          } else if (e.status == REPAIR_STATUS_REPAIR_OK) {
            tip.confirm('等待客户确认！')
          } else {
            let machines = JSON.stringify(e)
            wepy.navigateTo({
//              把machine信息传给下个页面
              url: '/pages/repair_detail?machineDetail=' + machines
            })
          }
        }
      }

      onLoad() {
        this.roleId = wepy.getStorageSync(ROLE_ID)
        console.log('start repair onLoad， roleId is:', this.roleId)
      }

      // 下拉刷新
      onPullDownRefresh() {
        this.getRepairMachineList()
      }

      onShow() {
        console.log('start repair onShow')
        this.getRepairMachineList()
      }

      async getRepairMachineList() {

        if (this.roleId == 1 || this.roleId == 2) {
          const repairMachineListJson = await api.getRepairRecordList({
            /**
             * 维修状态
             * 0: 报修进行中（报修过程中，文件上传没完成等情况）
             * 1：未派单，
             * 2：已派单（但未接单）,
             * 3：已接受（进行中，可以再派），
             * 4：失败，(可以 再派，代理商可以 转派)
             * 5：已再派，
             * 6：已转派，
             * 7：已完成(客户未确认)，
             * 8. 客户确认（维修成功）。转派后，前面的维修记录要保留，但是客户只需要看到成功的最后那次记录。
             */
            query: {repairStatus: 1}
          })
          console.log('获取 维修 派单列表:', repairMachineListJson)
          let tempList = repairMachineListJson.data.data.list
          this.repairList = []
          if (tempList.length > 0) {
            // 删除同recordId的重复记录
            this.repairList.push(tempList[0])
            for (let i = 1; i < tempList.length; i++) {
              let isRepeated = false
              for (let j = 0; j < i; j++) {
                if (tempList[i].id === tempList[j].id) {
                  isRepeated = true
                  break
                }
              }
              if (!isRepeated) {
                this.repairList.push(tempList[i])
              }
            }
            console.log(this.repairList)
          }
          this.$apply()
          wepy.stopPullDownRefresh()
        } else {
          console.log('非派单')
          let userAccount = wepy.getStorageSync(ACCOUNT)
          const repairMachineListJson = await api.getRepairList({
            query: {userName: userAccount}
          })
          console.log('获取列表:', repairMachineListJson)
          let tempList = repairMachineListJson.data.data.list
          this.repairList = []
          if (tempList.length > 0) {
            // 删除同recordId的重复记录
            this.repairList.push(tempList[0])
            for (let i = 1; i < tempList.length; i++) {
              let isRepeated = false
              for (let j = 0; j < i; j++) {
                if (tempList[i].id === tempList[j].id) {
                  isRepeated = true
                  break
                }
              }
              if (!isRepeated) {
                this.repairList.push(tempList[i])
              }
            }
            console.log(this.repairList)
          }
          this.$apply()
          wepy.stopPullDownRefresh()
        }
      }
    }

</script>
